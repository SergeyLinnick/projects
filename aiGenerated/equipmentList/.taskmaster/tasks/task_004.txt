# Task ID: 4
# Title: Implement Filtering and Search Functionality
# Status: pending
# Dependencies: 3
# Priority: medium
# Description: Add filtering capabilities for Category, Status, and Assigned To, along with a search bar for quick equipment lookup.
# Details:
1. Create filter components for Category, Status, and Assigned To
2. Implement a search bar component with debounce functionality
3. Use Zustand to manage filter and search state
4. Integrate filters with the equipment listing view
5. Update TanStack Query to handle filtered and searched data

```tsx
// Filter store with Zustand
interface FilterState {
  search: string;
  categoryId: string | null;
  status: string | null;
  assignedTo: string | null;
  setSearch: (search: string) => void;
  setCategoryId: (categoryId: string | null) => void;
  setStatus: (status: string | null) => void;
  setAssignedTo: (assignedTo: string | null) => void;
  resetFilters: () => void;
}

const useFilterStore = create<FilterState>((set) => ({
  search: '',
  categoryId: null,
  status: null,
  assignedTo: null,
  setSearch: (search) => set({ search }),
  setCategoryId: (categoryId) => set({ categoryId }),
  setStatus: (status) => set({ status }),
  setAssignedTo: (assignedTo) => set({ assignedTo }),
  resetFilters: () => set({ search: '', categoryId: null, status: null, assignedTo: null }),
}));

// Filter component
const EquipmentFilters = () => {
  const { search, categoryId, status, assignedTo, setSearch, setCategoryId, setStatus, setAssignedTo, resetFilters } = useFilterStore();
  
  return (
    <div className="flex flex-col md:flex-row gap-4 mb-6">
      <Input
        placeholder="Search equipment..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="max-w-xs"
      />
      
      <Select value={categoryId || ''} onValueChange={(value) => setCategoryId(value || null)}>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder="Category" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="">All Categories</SelectItem>
          {/* Map through categories */}
        </SelectContent>
      </Select>
      
      {/* Similar selects for Status and Assigned To */}
      
      <Button variant="outline" onClick={resetFilters}>Reset Filters</Button>
    </div>
  );
};
```

# Test Strategy:
Test the filter components in isolation using Vitest and React Testing Library. Verify that the Zustand store correctly updates state when filters are applied. Test the integration with the equipment listing to ensure filtered results are displayed correctly. Create Storybook stories for the filter components.
