# Task ID: 5
# Title: Implement Add/Edit Equipment Form
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create a form for adding new equipment or editing existing equipment details with validation using React Hook Form and Zod.
# Details:
1. Create a modal or dedicated page for the equipment form
2. Implement form fields for Name, Category, Status, Assigned To, Serial Number
3. Use React Hook Form with Zod validation
4. Add form submission handling with TanStack Query mutations
5. Implement success/error notifications

```tsx
const EquipmentForm = ({ equipment, onSuccess }) => {
  const { categories } = useCategories();
  const { users } = useUsers();
  
  const form = useForm<z.infer<typeof equipmentSchema>>({  
    resolver: zodResolver(equipmentSchema),
    defaultValues: equipment || {
      name: '',
      categoryId: '',
      status: 'Active',
      assignedTo: null,
      serialNumber: '',
      lastCheckOut: null,
    }
  });
  
  const mutation = useMutation({
    mutationFn: equipment ? updateEquipment : createEquipment,
    onSuccess: () => {
      toast.success(`Equipment ${equipment ? 'updated' : 'created'} successfully`);
      onSuccess();
    },
    onError: (error) => {
      toast.error(`Failed to ${equipment ? 'update' : 'create'} equipment: ${error.message}`);
    }
  });
  
  const onSubmit = (data) => {
    mutation.mutate(equipment ? { id: equipment.id, ...data } : data);
  };
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Equipment Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        {/* Similar FormField components for other fields */}
        
        <Button type="submit" disabled={mutation.isPending}>
          {mutation.isPending ? 'Saving...' : equipment ? 'Update Equipment' : 'Add Equipment'}
        </Button>
      </form>
    </Form>
  );
};
```

# Test Strategy:
Test form validation with various input scenarios. Verify that form submission correctly calls the appropriate mutation function. Test error handling and success notifications. Create Storybook stories for the form in different states (create mode, edit mode, with validation errors).
