# Task ID: 8
# Title: Implement Assignment and Check-in/out History
# Status: pending
# Dependencies: 3, 7
# Priority: high
# Description: Create functionality to assign equipment to users/technicians and track check-in/check-out history with timestamps.
# Details:
1. Create an assignment form/modal
2. Implement check-in and check-out functionality
3. Create a history view for each equipment item
4. Update the equipment list to show the last check-out date
5. Implement user selection dropdown

```tsx
// Assignment modal
const AssignmentModal = ({ equipment, isOpen, onClose }) => {
  const { users } = useUsers();
  const queryClient = useQueryClient();
  
  const form = useForm({
    resolver: zodResolver(assignmentSchema),
    defaultValues: {
      userId: '',
      notes: '',
    }
  });
  
  const mutation = useMutation({
    mutationFn: assignEquipment,
    onSuccess: () => {
      toast.success('Equipment assigned successfully');
      queryClient.invalidateQueries({ queryKey: ['equipment'] });
      onClose();
    }
  });
  
  const onSubmit = (data) => {
    mutation.mutate({
      equipmentId: equipment.id,
      userId: data.userId,
      notes: data.notes,
      checkOutDate: new Date(),
    });
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Assign Equipment</DialogTitle>
          <DialogDescription>
            Assign {equipment?.name} to a user and record check-out details.
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="userId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Assign To</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a user" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user.id} value={user.id}>
                          {user.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Notes</FormLabel>
                  <FormControl>
                    <Textarea {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button type="button" variant="outline" onClick={onClose}>Cancel</Button>
              <Button type="submit" disabled={mutation.isPending}>
                {mutation.isPending ? 'Assigning...' : 'Assign & Check Out'}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

// History view component
const EquipmentHistory = ({ equipmentId }) => {
  const { data: history, isLoading } = useQuery({
    queryKey: ['equipment-history', equipmentId],
    queryFn: () => fetchEquipmentHistory(equipmentId)
  });
  
  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">Assignment History</h3>
      
      {isLoading ? (
        <LoadingSpinner />
      ) : history.length === 0 ? (
        <p className="text-muted-foreground">No history records found.</p>
      ) : (
        <div className="border rounded-md">
          {history.map((record) => (
            <div key={record.id} className="p-4 border-b last:border-b-0">
              <div className="flex justify-between">
                <div>
                  <span className="font-medium">{record.userName}</span>
                  <span className="text-muted-foreground ml-2">
                    {formatDate(record.checkOutDate)}
                  </span>
                </div>
                <div>
                  {record.checkInDate ? (
                    <span className="text-green-600">Returned {formatDate(record.checkInDate)}</span>
                  ) : (
                    <span className="text-yellow-600">Currently checked out</span>
                  )}
                </div>
              </div>
              {record.notes && <p className="mt-2 text-sm">{record.notes}</p>}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
```

# Test Strategy:
Test the assignment form validation and submission. Verify that check-in and check-out operations correctly update the equipment status and history. Test the history view component to ensure it displays the correct information. Create Storybook stories for the assignment and history components.
