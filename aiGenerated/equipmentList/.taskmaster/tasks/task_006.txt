# Task ID: 6
# Title: Implement Equipment Categories Management
# Status: pending
# Dependencies: 2, 5
# Priority: medium
# Description: Create functionality to manage equipment categories, including adding, editing, and deleting categories, and assigning equipment to categories.
# Details:
1. Create a Categories page or modal
2. Implement a table to display existing categories
3. Add form for creating/editing categories
4. Implement delete functionality with confirmation
5. Create API integration for category management

```tsx
const CategoriesManagement = () => {
  const { data: categories, isLoading } = useQuery({
    queryKey: ['categories'],
    queryFn: fetchCategories
  });
  
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [isFormOpen, setIsFormOpen] = useState(false);
  
  const deleteMutation = useMutation({
    mutationFn: deleteCategory,
    onSuccess: () => {
      toast.success('Category deleted successfully');
      queryClient.invalidateQueries({ queryKey: ['categories'] });
    }
  });
  
  const handleDelete = (category) => {
    if (confirm(`Are you sure you want to delete ${category.name}?`)) {
      deleteMutation.mutate(category.id);
    }
  };
  
  return (
    <div className="container mx-auto py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Equipment Categories</h1>
        <Button onClick={() => { setSelectedCategory(null); setIsFormOpen(true); }}>
          Add Category
        </Button>
      </div>
      
      {isLoading ? (
        <LoadingSpinner />
      ) : (
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Description</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {categories.map((category) => (
              <TableRow key={category.id}>
                <TableCell>{category.name}</TableCell>
                <TableCell>{category.description}</TableCell>
                <TableCell>
                  <Button variant="ghost" onClick={() => { setSelectedCategory(category); setIsFormOpen(true); }}>
                    Edit
                  </Button>
                  <Button variant="destructive" onClick={() => handleDelete(category)}>
                    Delete
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
      
      {isFormOpen && (
        <CategoryForm 
          category={selectedCategory} 
          onClose={() => setIsFormOpen(false)} 
          onSuccess={() => {
            setIsFormOpen(false);
            queryClient.invalidateQueries({ queryKey: ['categories'] });
          }} 
        />
      )}
    </div>
  );
};
```

# Test Strategy:
Test the categories table rendering and CRUD operations. Verify that the form correctly handles create and update operations. Test delete confirmation and error handling. Create Storybook stories for the categories management components.
