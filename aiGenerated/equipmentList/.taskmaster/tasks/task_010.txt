# Task ID: 10
# Title: Implement Responsive Design and Accessibility
# Status: pending
# Dependencies: 3, 4, 5, 6, 7, 8, 9
# Priority: medium
# Description: Ensure the application is fully responsive across desktop and mobile devices, and meets accessibility standards.
# Details:
1. Implement responsive layouts for all pages and components
2. Add mobile-specific views for the equipment list (card view)
3. Ensure proper keyboard navigation
4. Add ARIA attributes for screen readers
5. Implement focus management for modals and dialogs
6. Test and fix any accessibility issues
7. Ensure color contrast meets WCAG standards
8. Add skip links for keyboard users

```tsx
// Example of responsive equipment list with card view for mobile
const EquipmentList = () => {
  const { data, isLoading } = useQuery({
    queryKey: ['equipment'],
    queryFn: fetchEquipment
  });
  
  // Use a media query hook to detect viewport size
  const isMobile = useMediaQuery('(max-width: 768px)');
  
  return (
    <div className="container mx-auto py-6">
      <h1 className="text-2xl font-bold mb-6" id="main-content">Equipment List</h1>
      
      {/* Skip link for keyboard users */}
      <a href="#main-content" className="sr-only focus:not-sr-only focus:absolute focus:p-2 focus:bg-white">
        Skip to main content
      </a>
      
      {isLoading ? (
        <LoadingSpinner aria-label="Loading equipment data" />
      ) : isMobile ? (
        // Card view for mobile
        <div className="grid grid-cols-1 gap-4">
          {data.map((item) => (
            <div key={item.id} className="border rounded-lg p-4 shadow-sm">
              <div className="flex justify-between items-start">
                <h3 className="font-medium">{item.name}</h3>
                <StatusBadge status={item.status} />
              </div>
              <p className="text-sm text-muted-foreground mt-1">{item.category}</p>
              
              <div className="mt-3 grid grid-cols-2 gap-2 text-sm">
                <div>
                  <span className="block text-muted-foreground">Assigned To</span>
                  <UserAvatar user={item.assignedTo} showName />
                </div>
                <div>
                  <span className="block text-muted-foreground">Serial Number</span>
                  {item.serialNumber}
                </div>
              </div>
              
              <div className="mt-4 flex justify-end space-x-2">
                <Button size="sm" variant="outline" asChild>
                  <Link to={`/equipment/${item.id}`} aria-label={`View details for ${item.name}`}>
                    View
                  </Link>
                </Button>
                <Button size="sm" variant="outline" asChild>
                  <Link to={`/equipment/${item.id}/edit`} aria-label={`Edit ${item.name}`}>
                    Edit
                  </Link>
                </Button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        // Table view for desktop
        <Table aria-label="Equipment list">
          <TableHeader>
            <TableRow>
              <TableHead>Equipment Name & Category</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Assigned To</TableHead>
              <TableHead>Serial Number</TableHead>
              <TableHead>Last Check Out</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.name} ({item.category})</TableCell>
                <TableCell>
                  <StatusBadge status={item.status} />
                </TableCell>
                <TableCell>
                  <UserAvatar user={item.assignedTo} />
                </TableCell>
                <TableCell>{item.serialNumber}</TableCell>
                <TableCell>{formatDate(item.lastCheckOut)}</TableCell>
                <TableCell>
                  <div className="flex space-x-2">
                    <Button size="sm" variant="ghost" asChild>
                      <Link to={`/equipment/${item.id}`} aria-label={`View details for ${item.name}`}>
                        View
                      </Link>
                    </Button>
                    <Button size="sm" variant="ghost" asChild>
                      <Link to={`/equipment/${item.id}/edit`} aria-label={`Edit ${item.name}`}>
                        Edit
                      </Link>
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </div>
  );
};
```

# Test Strategy:
Test responsive behavior across different viewport sizes. Use accessibility testing tools like axe to identify and fix accessibility issues. Test keyboard navigation to ensure all interactive elements are accessible without a mouse. Test with screen readers to verify proper ARIA attributes and focus management. Create Storybook stories that demonstrate responsive behavior.
